from aiogram import Bot, Dispatcher, executor, types
import datetime
import aiohttp
import os
import logging

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

async def fetch_price(session, date):
    date_str = date.strftime("%d-%m-%Y")
    url = f"https://api.coingecko.com/api/v3/coins/bitcoin/history?date={date_str}&localization=false"
    async with session.get(url) as response:
        if response.status != 200:
            return None
        data = await response.json()
        return data.get("market_data", {}).get("current_price", {}).get("usd")

@dp.message_handler(commands=['simulate'])
async def simulate(message: types.Message):
    try:
        parts = message.text.split()
        if len(parts) != 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π:\n/simulate –ì–ì–ì–ì-–ú–ú –°–£–ú–ú–ê")

        start_date_str, monthly_str = parts[1], parts[2]
        monthly_amount = float(monthly_str)
        start_date = datetime.datetime.strptime(start_date_str, "%Y-%m")

        now = datetime.datetime.utcnow()
        current = start_date
        total_btc = 0.0
        months = 0

        async with aiohttp.ClientSession() as session:
            while current <= now:
                price = await fetch_price(session, current)
                if price:
                    total_btc += monthly_amount / price
                    months += 1
                current += datetime.timedelta(days=32)
                current = current.replace(day=1)

            invested = months * monthly_amount

            async with session.get("https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd") as res:
                now_data = await res.json()
                now_price = now_data.get("bitcoin", {}).get("usd", 0)

            now_value = total_btc * now_price
            gain = now_value - invested
            emoji = "üü¢" if gain > 0 else "üî¥"

            await message.reply(
                f"üìÖ –° {start_date_str} —Ç—ã –±—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª {months} –º–µ—Å—è—Ü–µ–≤ –ø–æ ${monthly_amount:.2f}\n"
                f"üí∏ –í—Å–µ–≥–æ –≤–ª–æ–∂–µ–Ω–æ: ${invested:.2f}\n"
                f"ü™ô –ö—É–ø–ª–µ–Ω–æ BTC: {total_btc:.6f}\n"
                f"üí∞ –°–µ–π—á–∞—Å —ç—Ç–æ: ${now_value:,.2f}\n"
                f"{emoji} {'PROFIT' if gain > 0 else 'LOSS'}: {gain:+,.2f}"
            )

    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}\n–ü—Ä–∏–º–µ—Ä: /simulate 2015-01 100")

@dp.message_handler(commands=['start', 'help'])
async def welcome(message: types.Message):
    await message.reply(
        "üëã –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–±–µ, —Å–∫–æ–ª—å–∫–æ —Ç—ã –ø—Ä–æ–µ–±–∞–ª –Ω–∞ BTC üò¨\n\n"
        "üîç –ò—Å–ø–æ–ª—å–∑—É–π:\n"
        "`/simulate 2016-06 100` ‚Äî –µ—Å–ª–∏ –±—ã —Ç—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª $100 –µ–∂–µ–º–µ—Å—è—á–Ω–æ —Å –∏—é–Ω—è 2016\n\n"
        "‚ö†Ô∏è –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ —Ä–∞–Ω—å—à–µ 2010-07\n",
        parse_mode="Markdown"
    )

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
